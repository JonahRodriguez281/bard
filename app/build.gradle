apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"

static def getProperty(String filename, String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(filename))
    return properties.getProperty(property)
}

static def quoted(String value) {
    return "\"${value}\""
}

ext {
    appName = 'Bard'
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "edu.cnm.deepdive.bard"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue "string", "app_name", appName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['room.schemaLocation': "$projectDir/schemas".toString()]
            }
        }

        def connection_properties = "$projectDir/../../../services/bard.properties"

        buildConfigField "String", "BASE_URL",
                quoted(getProperty(connection_properties, "base_url"))

        resValue "string", "client_id", getProperty(connection_properties, "client_id")
        resValue "string", "authorization_scope", getProperty(connection_properties, "authorization_scope")
        resValue "string", "authorization_endpoint_uri", getProperty(connection_properties, "authorization_endpoint_uri")
        resValue "string", "token_endpoint_uri", getProperty(connection_properties, "token_endpoint_uri")

        def redirect_uri_scheme = getProperty(connection_properties, "redirect_uri_scheme")
        def redirect_uri_host = getProperty(connection_properties, "redirect_uri_host")
        def redirect_uri_path = getProperty(connection_properties, "redirect_uri_path")

        resValue "string", "redirect_uri_scheme", redirect_uri_scheme
        resValue "string", "redirect_uri_host", redirect_uri_host
        resValue "string", "redirect_uri_path", redirect_uri_path
        resValue "string", "redirect_uri", "${redirect_uri_scheme}://${redirect_uri_host}${redirect_uri_path}"

        manifestPlaceholders = [
                'appAuthRedirectScheme': "$redirect_uri_scheme"
        ]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {



    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation 'com.google.android.material:material:1.2.1'

    implementation 'androidx.preference:preference:1.1.1'

    implementation "androidx.navigation:navigation-fragment:$navigation_version"
    implementation "androidx.navigation:navigation-ui:$navigation_version"

    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation 'com.google.android.material:material:1.2.1'

    // ReactiveX dependencies
    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Retrofit (REST client) with ReactiveX & Gson integration
    def retrofit_version = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    implementation 'com.spotify.android:auth:1.1.0'

    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    implementation 'com.google.code.gson:gson:2.8.6'

    // Room dependencies
    def room_version = '2.2.5'
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"

    implementation 'net.openid:appauth:0.7.1'

    // Stetho dependencies
    implementation 'com.facebook.stetho:stetho:1.5.1'

    // JUnit testing dependencies
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}

android.applicationVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        def docTitle = "${appName} ${project.android.defaultConfig.versionName}"
        def compileTask = variant.javaCompileProvider.get()
        def androidLibJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        title docTitle
        description "Generates Javadoc for $variant.name."
        source = compileTask.source
        destinationDir = file("${projectDir}/../docs/api")
        doFirst {
            classpath = files(compileTask.classpath.files) + files(androidLibJar)
        }
        options {
            links 'https://docs.oracle.com/javase/8/docs/api/'
            links 'http://reactivex.io/RxJava/javadoc/'
            links 'https://javadoc.io/doc/io.reactivex.rxjava2/rxandroid/latest/'
            links 'https://javadoc.io/doc/com.google.code.gson/gson/latest/'
            links 'https://square.github.io/retrofit/2.x/retrofit/'
            links 'https://square.github.io/okhttp/3.x/okhttp/'
            links 'https://square.github.io/okhttp/3.x/logging-interceptor/'
            links 'https://javadoc.io/doc/com.facebook.stetho/stetho/latest/'
            links 'https://commons.apache.org/proper/commons-csv/apidocs/'
            links 'https://javadoc.io/doc/net.openid/appauth/'
            links 'https://spotify.github.io/android-sdk/auth-lib/docs/'
            links 'https://spotify.github.io/android-sdk/app-remote-lib/docs/'
            linksOffline 'https://developer.android.com/reference', "${projectDir}/../link-offline/android"
            linksOffline 'https://developers.google.com/android/reference', "${projectDir}/../link-offline/google"
            windowTitle docTitle
        }
    }
}